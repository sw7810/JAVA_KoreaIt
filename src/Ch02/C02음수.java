package Ch02;

public class C02음수 {

	public static void main(String[] args) {
		// 컴퓨터(CPU)는 가산회로에 의한 가산처리가 가능하다?	O
		// 컴퓨터(CPU)는 감산회로에 의한 가산처리가 가능하다?	X
		// 컴퓨터는(CPU)는 보수개념을 이용하여 뺄셈결과를 전달할 수 있다. O

//		9 - 3 = 6
//		9 +(7) = 16		, 7의 3의 보수 => 이후 앞자리는 버림
//		
//		75 - 22 = 53
//		75 +(78) = (1)53
//
//		00000101	=	 5
//		11111010	=	-6	(1의 보수)
//			   1
//	   +11111011	=	-5	(2의 보수)
//		-------------------
//					=	 0
//
//		MSB(부호비트) : 가장 왼쪽 1bit를 양수 혹은 음수로 판단하는 bit로 사용
//					저장공간(변수공간)에서 부호비트를 지원하면(Signed)
//					1 : 음수값, 0 : 양수값으로 해석
//					저장공간(변수공간)에서 부호비트를 지원하지 않으면 (Unsigned)
//					0, 1 : 양수
		
		//문제
		//10진수	-> 2진수
		//10	->	00001010
		//-10	->	11110110
//		System.out.println((byte)(0b00001010)+(byte)(0b11110110));
		//111	->	01101111
		//-111	->	10010001
		System.out.println((byte)(0b1101111)+(byte)(0b10010001));
		//96	->	01100000
		//-96	->10100000
		System.out.println((byte)(0b01100000)+ (byte)(0b10100000));
	
		
		//2진수	-> 10진수
		//10101010 	->	-128+63+8+2
		System.out.println((byte)(0b10101010));
		//11001101	->	-128+64+8+4+1
		System.out.printf("%d\n", (byte)(11001101));
		System.out.println((byte)(11001101));
		//10010010	->  -128+16+2
		System.out.println((byte)(10010010));
		
		
		
		
//		00000000 = 0
//		00000001 = 1
//		00000010 = 2
//		00000011 = 3
//		00000100 = 4
//		01111111 = 127
//		10000000 = -128
//		10000001 = -128+1 = -127
//		10000010 = -128+2 = -126
//		10000011 = -128+3 = -125
//		..
//		11111111 = -128 + 127 = -1
//		00000000 = 
	}

}
